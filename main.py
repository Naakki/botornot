import os
import datetime
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage


load_dotenv()
storage = MemoryStorage()
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(storage=storage)

class NewTaksStates(StatesGroup):
    task_title = State()

@dp.message(Command('start'))
async def start_command(message: Message):
    user_name = message.from_user.first_name
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {user_name}!\n \
                            –Ø –µ—â–µ —É—á—É—Å—å –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. \
                            –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ–∏, —á–µ–º —è –º–æ–æ–≥—É –ø–æ–º–æ—á—å, \
                            —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º.\n\n\
                            /help - –ø–æ–º–æ—â—å\n\
                            /time - —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è\n\
                            /say - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    
@dp.message(Command('help'))
async def help_command(message: Message):
    help_text = '''
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

        /help - –ø–æ–º–æ—â—å
        /time - —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è
        /say - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                '''
    await message.answer(help_text)

@dp.message(Command('new_task'))
async def add_new_task(message: Message, state: FSMContext):
    await message.answer("‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:")
    await state.set_state(NewTaksStates.task_title)

@dp.message(NewTaksStates.task_title, F.text)
async def set_task_title(message: Message, state: FSMContext):
    title = message.text.strip()
    await state.update_data(title=title)
    user_data = await state.get_data()
    await message.answer(
        "üìù–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:\n\n"
        f" - {user_data['title']}",
        parse_mode="Markdown"
    )
    await state.clear()

@dp.message(Command('time'))
async def time_command(message: Message):
    await message.answer(str(datetime.datetime.now()))

async def main():
    print("Bot starting...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())