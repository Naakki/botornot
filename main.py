import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from keyboard import get_main_keyboard, get_vote_keyboard, get_crud_task_key, votes
from service import NotesDatabase


load_dotenv()
notesdb = NotesDatabase()
storage = MemoryStorage()
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(storage=storage)

class NewTaksStates(StatesGroup):
    task_title = State()
    task_comment = State()
    task_category = State()

class CRUDTaskStates(StatesGroup):
    operation = State()

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

def format_quote(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ü–∏—Ç–∞—Ç—É Markdown"""
    lines = text.split('\n')
    quoted_lines = [f"> {line}" for line in lines]
    return '\n'.join(quoted_lines)

@dp.message(Command('start'))
async def start_command(message: Message):
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    await notesdb.init_db()
    await message.answer(f'''
–ü—Ä–∏–≤–µ—Ç, {user_name} ({user_id})! –Ø –µ—â–µ —É—á—É—Å—å –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. 
–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ–∏, —á–µ–º —è –º–æ–æ–≥—É –ø–æ–º–æ—á—å, —Ç–æ 
–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º.

/help - –ø–æ–º–æ—â—å 
/time - —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è 
/say - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
''',
reply_markup=get_main_keyboard())
    
@dp.message(F.text == "üîßTODO list")
async def todolist(message: Message):
    todo_list = '''
1. –í–µ–±-—Å–µ—Ä–≤–∏—Å (–≤–µ–±-–∞–ø–ø) –¥–ª—è –±–æ—Ç–∞
2. –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á
3. CRUD –∑–∞–¥–∞—á
4. –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
5. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–¥ –∑–∞–¥–∞—á–∞–º–∏ –∏ —É–¥–µ–ª–æ–º–ª–µ–Ω–∏—è–º–∏
'''
    await message.answer(todo_list)
    
@dp.message(F.text == "‚ÑπÔ∏è–ü–æ–º–æ—â—å")
async def help_message(message: Message):
    help_text = '''
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/help - –ø–æ–º–æ—â—å
/time - —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è
/say - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                '''
    await message.answer(help_text)

                                                        # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ù–∞—á–∞–ª–æ
@dp.message(F.text == "üìù–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_new_task(message: Message, state: FSMContext):
    await message.answer("‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")
    await state.set_state(NewTaksStates.task_title)

@dp.message(NewTaksStates.task_title, F.text)
async def set_task_title(message: Message, state: FSMContext):
    title = message.text.strip()
    await state.update_data(title=title)
    await message.answer("‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await state.set_state(NewTaksStates.task_comment)

@dp.message(NewTaksStates.task_comment, F.text)
async def set_task_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    await state.update_data(comment=comment)
    await message.answer("‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await state.set_state(NewTaksStates.task_category)

@dp.message(NewTaksStates.task_category, F.text)
async def set_task_comment(message: Message, state: FSMContext):
    category = message.text.strip()
    await state.update_data(category=category)
    user_data = await state.get_data()

    try:
        await notesdb.add_note(user_data)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: \n\n"
                             f"*{escape_markdown(user_data['title'])}*\n"
                             f"{format_quote(escape_markdown(user_data['comment']))}", 
                             parse_mode="MarkdownV2")
    except Exception as e:
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")

    await state.clear()
                                                        # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ö–æ–Ω–µ—Ü

@dp.message(F.text == "üìÑ–í—Å–µ –∑–∞–¥–∞—á–∏")
async def get_all_notes(message: Message):
    notes = await notesdb.get_all_notes()
    result = []

    if not notes:
        await message.answer("‚úÖ–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    else:
        for note in notes:
            safe_title = escape_markdown(note['title'])
            safe_comment = format_quote(escape_markdown(note['comment']))

            result.append(f"/task\\_{note['id']} *{safe_title}*\n"
                        f"{safe_comment}")
            
        await message.answer('\n\n'.join(result), parse_mode="MarkdownV2")

                                                        # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
@dp.message(F.text.startswith("/task_"))
async def get_task(message: Message, state: FSMContext):
    id = message.text.split('_')[1]

    if id.isdigit():
        task = await notesdb.get_note_by_id(id)

        if task:
            await state.update_data(id=id)
            await state.set_state(CRUDTaskStates.operation)
            await message.answer(f"/task\\_{task['id']} *{task['title']}*\n"
                                f"{format_quote(task['comment'])}",
                                parse_mode="MarkdownV2",
                                reply_markup=get_crud_task_key())
        else:
            await message.answer("‚ùå–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏")
    else:
        await message.delete()

@dp.callback_query(CRUDTaskStates.operation, F.data == "complete_task")
async def complete_task(callback: CallbackQuery, state: FSMContext):
    id = await state.get_data()
    await notesdb.delete_note(id['id'])

    notes = await notesdb.get_all_notes()
    result = []

    if not notes:
        await callback.message.edit_text("‚úÖ–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        await callback.answer()
    else:
        for note in notes:
            safe_title = escape_markdown(note['title'])
            safe_comment = format_quote(escape_markdown(note['comment']))

            result.append(f"/task\\_{note['id']} *{safe_title}*\n"
                        f"{safe_comment}")
        
        await callback.message.edit_text('\n\n'.join(result), parse_mode="MarkdownV2")
        await callback.answer("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ", show_alert=False)
    
    await state.clear()

@dp.callback_query(CRUDTaskStates.operation, F.data == "go_back_to_task_list")
async def go_back(callback: CallbackQuery, state: FSMContext):
    notes = await notesdb.get_all_notes()
    result = []

    if not notes:
        await callback.message.edit_text("‚úÖ–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    else:
        for note in notes:
            safe_title = escape_markdown(note['title'])
            safe_comment = format_quote(escape_markdown(note['comment']))

            result.append(f"/task\\_{note['id']} *{safe_title}*\n"
                          f"{safe_comment}")
        
        await callback.message.edit_text('\n\n'.join(result), parse_mode="MarkdownV2")
    await callback.answer()

                                                    # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –ö–æ–Ω–µ—Ü        

@dp.message(F.text == "üí≠–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def say_command(message: Message):
    await message.answer('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:', reply_markup=get_vote_keyboard())

@dp.message(F.photo)
async def photo_messages(message: Message):
    photo_id = message.photo[-1].file_id
    await message.answer("–ü—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –Ω—É–¥–µ—Å—ã.")

@dp.message(F.document)
async def document_message(message: Message):
    doc_name = message.document.file_name
    doc_size = message.document.file_size
    await message.answer(
        f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {doc_name}\n"
        f"–†–∞–∑–º–µ—Ä: {doc_size/1000 } KB\n"
    )

@dp.callback_query(F.data.startswith("vote_"))
async def handle_vote(callback: CallbackQuery):
    vote_type = callback.data.split("_")[1] #like, dislike, love
    votes[vote_type] += 1

    await callback.message.edit_text(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:",
                                     reply_markup=get_vote_keyboard())

@dp.message()
async def all_messages(message: Message):
    await message.delete()


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
async def main():
    print("Bot starting...")
    await notesdb.init_db()
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Stop via creator...')